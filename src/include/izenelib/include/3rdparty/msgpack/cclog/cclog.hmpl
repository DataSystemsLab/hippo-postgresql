//
// cclog
//
// Copyright (C) 2009 FURUHASHI Sadayuki
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#ifndef CCLOG_H__
#define CCLOG_H__

#include <sstream>
#include <iostream>


#ifndef CCLOG_LEVEL

#ifdef NDEBUG
#define CCLOG_LEVEL 2
#else
#define CCLOG_LEVEL 0
#endif

#endif

#if CCLOG_LEVEL > 5
#define DISABLE_CCLOG
#endif
% GENERATION_LIMIT = 16

class cclog_initializer;

class cclog {
public:
	static void reset(cclog* lg);
	static void destroy();

public:
	static cclog& instance();

public:
	enum level {
		TRACE  = 0,
		DEBUG  = 1,
		INFO   = 2,
		WARN   = 3,
		ERROR  = 4,
		FATAL  = 5,
	};

	cclog(level runtime_level);
	virtual ~cclog();

#define CCLOG_IMPL_BEGIN \
	try { \
		if(lv < m_runtime_level) { return; } \
		std::stringstream s; \
		do { \
			char tmbuf[21]; \
			time_t ti = time(NULL); \
			struct tm t; localtime_r(&ti, &t); \
			s.write(tmbuf, strftime(tmbuf, sizeof(tmbuf), "%Y-%m-%d %H:%M:%S ", &t)); \
		} while(0)

#define CCLOG_IMPL_END \
		std::string str(s.str()); \
		log_impl(lv, str); \
	} catch (...) { \
		std::cerr << prefix << " log error" << std::endl; \
	}

%0.upto(GENERATION_LIMIT) do |i|
	template <typename A0[%:1.upto(i) {|j|%], typename A[%j%][%:}%]>
	void log(level lv, const char* prefix, A0 a0[%:1.upto(i) {|j|%], A[%j%] a[%j%][%:}%]) {
		CCLOG_IMPL_BEGIN;
		s << prefix << a0[%:1.upto(i) {|j|%] << a[%j%][%:}%];
		CCLOG_IMPL_END;
	}
%end

private:
	virtual void log_impl(level lv, std::string& str) = 0;

private:
	level m_runtime_level;

private:
	friend class cclog_initializer;
	static cclog* s_logger;

private:
	cclog();
	cclog(const cclog&);
};

inline cclog& cclog::instance()
{
	return *s_logger;
}


#include "cclog_null.h"

#ifndef DISABLE_CCLOG
static unsigned long cclog_initializer_counter = 0;

class cclog_initializer {
public:
	cclog_initializer()
	{
		if(0 == cclog_initializer_counter++) {
			if(cclog::s_logger == NULL) {
				cclog::reset(new cclog_null());
			}
		}
	}
	~cclog_initializer()
	{
		if(0 == --cclog_initializer_counter) {
			cclog::destroy();
		}
	}
private:
	void initialize();
};

static cclog_initializer cclog_initializer_;
#endif

#define CCLOG_XSTR(s) #s
#define CCLOG_XSTR_(x) CCLOG_XSTR(x)
#define CCLOG_LINE   CCLOG_XSTR_(__LINE__)

#ifndef CCLOG_PREFIX
#define CCLOG_PREFIX __FILE__ ":" CCLOG_LINE ": "
#endif

#ifndef CCLOG_PREFIX_VERBOSE
#define CCLOG_PREFIX_VERBOSE __FILE__ ":" CCLOG_LINE ":", __FUNCTION__, ": "
#endif

%LEVELS = ["TRACE", "DEBUG", "INFO", "WARN", "ERROR", "FATAL"]
%LEVELS[0, 2].each do |l|
#ifndef CCLOG_PREFIX_[%l%]
#define CCLOG_PREFIX_[%l%] CCLOG_PREFIX_VERBOSE
#endif
%end
%LEVELS[2..-1].each do |l|
#ifndef CCLOG_PREFIX_[%l%]
#define CCLOG_PREFIX_[%l%] CCLOG_PREFIX
#endif
%end

%LEVELS.each do |l|
#if CCLOG_LEVEL <= [%LEVELS.index(l)%]
#define LOG_[%l%](...) \
	cclog::instance().log(cclog::[%l%], CCLOG_PREFIX_[%l%], __VA_ARGS__)
#else
#define LOG_[%l%](...) ((void)0)
#endif
%end

#endif /* cclog.h */
% # vim: ft=mplex
